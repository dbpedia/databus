#!/usr/bin/env node

/**
 * Module dependencies.
 */



 initializeExtensions();

let numCPUs = require('os').cpus().length;
const fs = require('fs');
const cluster = require('cluster');
const http = require('http');
const DatabusMessage = require('./app/common/databus-message');
var initialize = require('./init');
var validate = require('./validate');

var searchIndexer = null;
var runTests = require('./app/test/main.js');
const IndexManager = require('./app/indexing/index-manager.js');
const IndexGroup = require('./app/indexing/index-group.js');
const DatabusResource = require('./app/common/databus-resource.js');
const MetricsManager = require('./app/api/statistics/metrics-manager.js');

if (cluster.isMaster) {
  masterProcess();
} else {
  childProcess();
}

function broadcast(msg) {
  Object.keys(cluster.workers).forEach(function (id) {
    cluster.workers[id].send(msg);
  });
}

function createFork(onListening) {
  var fork = cluster.fork();

  if (onListening != undefined) {
    fork.on('listening', function (address) {
      onListening();
    });
  }

  fork.on('message', function (message) {
    if (message.id == DatabusMessage.NOTIFY_DATABUS_USER_ADDED) {
      broadcast({
        id: DatabusMessage.DATABUS_USER_ADDED,
        body: message.body
      });
    }

    if (message.id == DatabusMessage.FILE_DOWNLOADED) {
      MetricsManager.registerRequest(message.body);
    }

    if (message.id == DatabusMessage.REQUEST_SEARCH_INDEX_REBUILD) {
      let databusResource = new DatabusResource(message.resource);
      searchIndexer.updateResource(message.resource, databusResource.getTypeName());
    }
  });
}

async function masterProcess() {

  console.log(`######`);
  console.log(`#     #   ##   #####   ##   #####  #    #  ####`);
  console.log(`#     #  #  #    #    #  #  #    # #    # #`);
  console.log(`#     # #    #   #   #    # #####  #    #  ####`);
  console.log(`#     # ######   #   ###### #    # #    #      #`);
  console.log(`#     # #    #   #   #    # #    # #    # #    #`);
  console.log(`######  #    #   #   #    # #####   ####   ####`);
  console.log(``)

  console.log(`================================================`);
  console.log(``);
  console.log(`Environment Variables:`);
  console.log(`------------------------------------------------`);
  console.log(`DATABUS_RESOURCE_BASE_URL\t${process.env.DATABUS_RESOURCE_BASE_URL}`);
  console.log(`DATABUS_DATABASE_URL\t\t${process.env.DATABUS_DATABASE_URL}`);
  console.log(`DATABUS_NAME\t\t\t${process.env.DATABUS_NAME}`);
  console.log(`DATABUS_ORG_ICON\t\t${process.env.DATABUS_ORG_ICON}`);
  console.log(`DATABUS_BANNER_COLOR\t\t${process.env.DATABUS_BANNER_COLOR}`);
  console.log(`METRICS_PORT\t\t\t${process.env.METRICS_PORT}`);
  console.log(``);
  console.log(`================================================`);
  console.log(``);

  if(process.env.DATABUS_RESOURCE_BASE_URL == null) {
    console.log(`Environment variable DATABUS_RESOURCE_BASE_URL not set. Exiting.`);
  }

  if(process.env.DATABUS_DATABASE_URL == null) {
    console.log(`Environment variable DATABUS_DATABASE_URL not set. Exiting.`);
  }

  try {

    console.log(`Starting search service...`)

    let indexGroups = [];
    indexGroups.push(new IndexGroup("version", ["../search/indexer/version.yml" ]));
    indexGroups.push(new IndexGroup("artifact", ["../search/indexer/artifact.yml" ]));
    indexGroups.push(new IndexGroup("group", ["../search/indexer/group.yml" ]));
    indexGroups.push(new IndexGroup("account", ["../search/indexer/account.yml" ]));
    indexGroups.push(new IndexGroup("collection", ["../search/indexer/collection.yml" ]));

    searchIndexer = new IndexManager(indexGroups, 1000);
    await searchIndexer.start();
    console.log(``);
    console.log(`================================================`);
    console.log(``);
    await initialize(searchIndexer);

    // TODO: Validate startup environment variables
    console.log(`Number of CPUs is ${numCPUs}`);
    console.log(`Master ${process.pid} is running`);

    if(process.env.MAX_WORKERS != undefined) {
      var maxWorkers = parseInt(process.env.MAX_WORKERS);

      if(numCPUs > maxWorkers) {
        console.log(`Number of workers restricted to ${maxWorkers} by ENV:MAX_WORKERS.`);
        numCPUs = maxWorkers;
      }
    }
    

    console.log(`================================================`);
    var numStartedWorkers = 0;

    for (let i = 0; i < numCPUs; i++) {
      console.log(`Forking process number ${i}...`);

      createFork(async function () {
        numStartedWorkers++;
        if (numCPUs == numStartedWorkers) {
          console.log(`================================================`);
          console.log(`All workers started.`);

          await validate(searchIndexer);

          if ( process.env.DATABUS_TEST ){
            console.log('Running tests...');
            runTests();
          }
          console.log(`================================================`);
        }
      });
    }


    cluster.on('exit', (worker, code, signal) => {
      console.log(`worker ${worker.process.pid} died`);
      console.log("Forking another worker!");
      createFork();
    });

    if(process.env.METRICS_PORT != null) {
      var port = normalizePort(process.env.METRICS_PORT || '3001');
      console.log(`Starting Prometheus metrics server (port ${port})...`);
      MetricsManager.startServer(port);
    }

  } catch (err) {
    console.log(`Initialization error: \n${err}`);
    process.exit(err ? 1 : 0)
  }
}

function childProcess() {
  try {
    console.log(`Worker ${process.pid} started...`);

    var app = require('./app/app');
    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    var server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', function () {
      console.log(`Worker ${process.pid} listening on port ${port}`);
    });
  } catch(err) {
    console.log(err);
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function initializeExtensions() {
  // add a sparql file loading extension (simply read the file as a string)
  require.extensions['.sparql'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };

  require.extensions['.shacl'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };


  require.extensions['.jsonld'] = function (module, filename) {
    module.exports = JSON.parse(fs.readFileSync(filename, 'utf8'));
  };

  require.extensions['.ejs'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };

  require.extensions['.sql'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };

  require.extensions['.md'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };
  require.extensions['.ttl'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };
  require.extensions['.html'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };
}