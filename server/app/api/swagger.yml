openapi: "3.0.3"

info:
  description: "This is the Databus API documentation."
  version: "2.1.0"
  title: "Databus API"

components:
  securitySchemes:
    ApiKeyAuth:        
      type: apiKey
      in: header       
      name: X-API-KEY  
      
paths:
  /:
    get:
      summary: "Manifest"
      description: "Get the Databus manifest."
      operationId: "manifest-get"
      tags:
        - Main API
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: "Accepted"
          content:
            text/turtle:
              schema:
                type: string
                example: |
                  @base <%DATABUS_RESOURCE_BASE_URL%> .
                  @prefix databus: <https://dataid.dbpedia.org/databus#> .
                  @prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
                  @prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
                  @prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
                  @prefix dcat:  <http://www.w3.org/ns/dcat#> .
                  @prefix dct:   <http://purl.org/dc/terms/> .

                  <> a databus:Databus . 
                  <> dct:hasVersion "<2.1.0-rc.1>" .

  /api/publish:
    post:
      summary: "Publish Metadata"
      description: "
      Publish metadata Json-LD (DataID) on the Databus. 

      
      A [DataId](http://dataid.dbpedia.org/ns/core.html) is an RDF metadata document with an entity of rdf:type [dataid:Dataset](http://dataid.dbpedia.org/ns/core#Dataset) at its heart. The document contains information about the corresponding dataset:
      
        * The containing files and their metadata
        
        * A Databus version
        
        * A Databus artifact
        
        * A Databus group
        
      
      The server will try to auto-complete your input and can optionally calculate the required sha256sum and byteSize properties.
      
            
           The input data must be supplied as Json-LD.
           
            
           The input data will be filtered with the following construct queries:
            
                * [Construct group](./server/app/common/queries/constructs/construct-group.sparql) query
              
                * [Construct version](./server/app/common/queries/constructs/construct-version.sparql) query
                
              
           Each construct query result will then be validated with their corresponding SHACL shape (e.g. group construct query result validated by group SHACL shapes):
            
                * [Group SHACL](./server/app/common/shacl/group-shacl.ttl) shapes
              
                * [Version SHACL](./server/app/common/shacl/dataid-shacl.ttl) shapes
      "
      operationId: "publish"
      tags:
        - Main API
      security:
        - ApiKeyAuth: []
      parameters:
        - name: fetch-file-properties
          in: query
          schema:
            type: boolean
          description: "If set to false, the server will not verify the *sha256sum* and *byteSize* properties of any *databus:Part*. Default value is *true*."
          required: false
          example: "true"
        - name: log-level
          in: query
          schema:
            type: string
          description: "Desired detail of the publish report. Can be set to either 'error', 'info' or 'debug'."
          required: false
          example: "info"
      requestBody:
        description: "Metadata in JSONLD. May contain any number of groups, artifacts and datasets"
        required: true
        content:
          application/ld+json:
            schema:
              type: object
              example: |
                {
                  "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                  "@graph": [
                    {
                      "@type": "Dataset",
                      "@id": "https://dev.databus.dbpedia.org/<your username>/test_group/test_artifact/2022-02-09#Dataset",
                      "hasVersion": "2022-02-09",
                      "title": "test_group test_artifact",
                      "description": "version of the test_artifact dataset from DBpedia",
                      "license": "https://dalicc.net/licenselibrary/Apache-2.0",
                      "distribution": [
                        {
                          "@type": "Part",
                          "formatExtension": "md",
                          "compression": "none",
                          "downloadURL": "https://raw.githubusercontent.com/dbpedia/databus/68f976e29e2db15472f1b664a6fd5807b88d1370/README.md"
                        }
                      ]
                    }
                  ]
                }
      responses:
        "200":
          description: "Accepted"
          content:
            application/json:
              schema:
                type: object
                example: |
                  {
                    "logLevel": "info",
                    "log": [
                      {
                        "resource": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%",
                        "msg": "Successfully published group <%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%>.",
                        "payload": {
                          "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                          "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%",
                          "@type": "Group",
                          "abstract": "%GROUP% datasets from DBpedia",
                          "description": "%GROUP% datasets from DBpedia",
                          "title": "%GROUP% Data"
                        },
                        "level": "info"
                      },
                      {
                        "resource": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%",
                        "msg": "Successfully published artifact <%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%>.",
                        "payload": {
                          "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                          "@graph": [
                            {
                              "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%",
                              "@type": "Artifact",
                              "group": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%",
                              "abstract": "%ARTIFACT% data from DBpedia",
                              "description": "%ARTIFACT% data from DBpedia",
                              "title": "%ARTIFACT%"
                            },
                            {
                              "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%",
                              "@type": "Group"
                            }
                          ]
                        },
                        "level": "info"
                      }
                    ]
                  }
        "403":
          description: "Error: Forbidden. The account failed to authenticate."
          content:
            application/json:
              schema:
                type: object
                example: |
                  {
                    "logLevel": "info",
                    "log": [
                      {
                        "resource": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%",
                        "msg": "Not allowed to access namespace of group identifier <%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%>.",
                        "level": "error"
                      }
                    ]
                  }
  /sparql:
    post:
      summary: "Send SPARQL Query"
      description: "Send a SPARQL request to Databus. SPARQL queries are useful for retrieving the published metadata. This gives users flexibility to make complicated requests combining files from different datasets and of different versions."
      operationId: "sparql-post"
      tags:
        - Main API
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        description: "A SPARQL query."
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                query:
                  type: string
                  example: "select distinct * where {?a ?b ?c} LIMIT 2"
      responses:
        "200":
          description: "The result of the SPARQL query."
          content:
            application/sparql-results+xml:
              schema:
                type: object
                xml:
                  name: 'sparql'
                example: |
                  <sparql xmlns="http://www.w3.org/2005/sparql-results#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2001/sw/DataAccess/rf1/result2.xsd">
                    <head>
                      <variable name="a"/>
                      <variable name="b"/>
                      <variable name="c"/>
                    </head>
                    <results distinct="false" ordered="true">
                      <result>
                        <binding name="a">
                          <uri>http://www.openlinksw.com/schemas/virtrdf#DefaultQuadMap</uri>
                        </binding>
                        <binding name="b">
                          <uri>http://www.w3.org/1999/02/22-rdf-syntax-ns#type</uri>
                        </binding>
                        <binding name="c">
                          <uri>http://www.openlinksw.com/schemas/virtrdf#QuadMap</uri>
                        </binding>
                      </result>
                      <result>
                        <binding name="a">
                          <uri>http://www.openlinksw.com/schemas/virtrdf#DefaultServiceMap</uri>
                        </binding>
                        <binding name="b">
                          <uri>http://www.w3.org/1999/02/22-rdf-syntax-ns#type</uri>
                        </binding>
                        <binding name="c">
                          <uri>http://www.openlinksw.com/schemas/virtrdf#QuadMap</uri>
                        </binding>
                      </result>
                    </results>
                  </sparql>
        "400":
          description: "Error: Bad Request"
          content:
            text/plain:
              schema:
                type: string
                example: |
                  Virtuoso 37000 Error SP030: SPARQL compiler, line 2: syntax error at '=' before 'distinct'

                  SPARQL query:
                  define sql:big-data-const 0
                  select= distinct * where {?a ?b ?c} LIMIT 2
  /api/search:
    get:
      summary: "Search"
      description: "Search the index of the Databus. For a full list of the search syntax please refer to the [Lookup Documentation](https://github.com/dbpedia/dbpedia-lookup)"
      operationId: "search"
      tags:
        - Main API
      parameters:
        - name: query
          in: query
          description: search query
          schema:
            type: string
          required: true
          example: '%ARTIFACT%'
        - name: typeName
          in: query
          description: The type of entities to return. White space separated list of one or multiples of
            * Account
            * Group
            * Artifact
            * Version
            * Collection
          schema:
            type: string
          required: false
          example: 'Artifact'
        - name: part
          in: query
          description: A query for one or multiple parta of the entity uri (white space separated list).
          schema:
            type: string
          required: false
          example: ''
        - name: partRequired
          in: query
          description: If set to true, results without a match on the part field are omitted. 
          schema:
            type: boolean
          required: false
          example: 'true'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                example: '{
                  "docs": [
                    {
                      "typeName": [
                        "Artifact"
                      ],
                      "score": [
                        "337.63354"
                      ],
                      "label": [
                        "%GROUP%s %ARTIFACT%"
                      ],
                      "resource": [
                        "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%"
                      ],
                      "part": [
                        "%USERNAME%",
                        "%GROUP%",
                        "%ARTIFACT%"
                      ]
                    }
                  ],
                  "query": "%ARTIFACT%"
                  
                }'
        "404":
          description: "Error: Not Found."
  /{account}/{group}:
    put:
      summary: "Create / Update Group"
      description: "
        Creates or updates a Databus Group.
        
          * The input data must be supplied as Json-LD 
        
          * The input data will be filtered with this [construct query](./server/app/common/queries/constructs/construct-group.sparql)

          * The **filtered data** must conform to these [SHACL shapes](./server/app/common/shacl/group-shacl.ttl)

          * The uri of the dataid:Group has to match the request uri. 
          
          
          Note that the *@id* of the supplied graph has to be the same as the request uri. Additionally, the uri has to be in user's namespace.
      "
      operationId: "create-group"
      tags:
        - Group 
      security:
        - ApiKeyAuth: []
      parameters:
        - name: account
          in: path
          schema:
            type: string
          description: account namespace
          required: true
          example: '%USERNAME%'
        - name: group
          in: path
          description: group identifier
          schema:
            type: string
          required: true
          example: "%GROUP%"
      requestBody:
        description: "Group data as JSONLD."
        required: true
        content:
          application/ld+json:
            schema:
              type: object
              example: '{
                  "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                  "@graph": {
                    "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%",
                    "@type": "Group",
                    "title": "%GROUP% Data",
                    "description": "Various %GROUP% datasets extracted from DBpedia using AI."
                  }
                }'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                example: '{
                    "logLevel": "error",
                    "log": []
                  }'
        "400":
          description: "Error: Bad Request"
          content:
            application/json:
              schema:
                type: object
                example: '{
                    "logLevel": "error",
                    "log": [
                      {
                        "resource": null,
                        "msg": "No graph with id <%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%>  found in the input.",
                        "payload": null,
                        "level": "error"
                      }
                    ]
                  }'
        "403":
          description: "Error: Forbidden"
          content:
            text/plain:
              schema:
                type: string
                example: "You cannot perform this action in a foreign namespace."
    get:
      summary: "Get Group"
      description: "Retrieve a Databus Group as JSONLD."
      operationId: "get-group"
      tags:
        - Group 
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: group
          in: path
          description: target group identifier
          schema:
            type: string
          required: true
          example: "%GROUP%"
      responses:
        "200":
          description: "OK"
          content:
            application/ld+json:
              schema:
                type: object
                example: |
                  {
                    "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                    "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%",
                    "@type": "Group"
                  }
        "404":
          description: "Not Found."
          content:
            text/plain:
              schema:
                type: string
                example: "The requested resource could not be found."
    delete:
      summary: "Delete Group"
      description: "Deletes a Databus Group from the Databus. Associated Artifacts and Versions will stay intact but some features such as query generations will break for these entities. 
        **If you intend to delete the whole group, query the associated entities and delete them first.**"
      operationId: "delete-group"
      tags:
        - Group 
      security:
        - ApiKeyAuth: []
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: group
          in: path
          description: target group identifier
          schema:
            type: string
          required: true
          example: "%GROUP%"
      responses:
        "200":
          description: "OK"
        "204":
          description: "No Content"
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
                example: "You cannot perform this action in a foreign namespace."
        "409":
          description: "Conflict - There are still versions or artifacts associated with this group."
  /{account}/{group}/{artifact}:
    put:
      summary: "Create / Update Artifact"
      description: "Creates or updates a Databus Artifact."
      operationId: "create-artifact"
      tags:
        - Artifact 
      security:
        - ApiKeyAuth: []
      parameters:
        - name: account
          in: path
          description: account name
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: group
          in: path
          description: target group name
          schema:
            type: string
          required: true
          example: "%GROUP%"
        - name: artifact
          in: path
          description: target artifact name
          schema:
            type: string
          required: true
          example: "%ARTIFACT%"
      requestBody:
        description: "Artifact data as JSONLD."
        required: true
        content:
          application/ld+json:
            schema:
              type: object
              example: |
                {
                  "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                  "@graph": {
                    "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%",
                    "@type": "Artifact",
                    "title": "%ARTIFACT% Data",
                    "description": "%ARTIFACT% description."
                  }
                }
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                example: '{
                    "logLevel": "error",
                    "log": []
                  }'
        "400":
          description: "Error: Bad Request"
          content:
            application/json:
              schema:
                type: object
                example: '{
                    "logLevel": "error",
                    "log": [
                      {
                        "resource": null,
                        "msg": "No graph %DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT% found in the input.",
                        "payload": null,
                        "level": "error"
                      }
                    ]
                  }'
        "403":
          description: "Error: Forbidden"
          content:
            text/plain:
              schema:
                type: string
                example: "You cannot perform this action in a foreign namespace."
    get:
      summary: "Get Artifact"
      description: "Retrieve a Databus Artifact as JSONLD."
      operationId: "get-artifact"
      tags:
        - Artifact 
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: group
          in: path
          description: group identifier
          schema:
            type: string
          required: true
          example: "%GROUP%"
        - name: artifact
          in: path
          description: artifact identifier
          schema:
            type: string
          required: true
          example: "%ARTIFACT%"
      responses:
        "200":
          description: "OK"
          content:
            application/ld+json:
              schema:
                type: object
                example: |
                  {
                    "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                    "@graph": [
                      {
                        "@id": "https://dev.databus.dbpedia.org/dnkg/raw-exports/dnb",
                        "@type": "Artifact"
                      },
                      {
                        "@id": "https://dev.databus.dbpedia.org/janfo/general/first",
                        "@type": "Artifact"
                      },
                      {
                        "@id": "https://dev.databus.dbpedia.org/%USERNAME%/cleaned/geonames",
                        "@type": "Artifact"
                      },
                      {
                        "@id": "https://dev.databus.dbpedia.org/kirikiki/animals/birds",
                        "@type": "Artifact"
                      },
                      {
                        "@id": "https://dev.databus.dbpedia.org/kirikiki/animals/fish",
                        "@type": "Artifact"
                      },
                      {
                        "@id": "https://dev.databus.dbpedia.org/denis/group1/artifact1",
                        "@type": "Artifact"
                      },
                      {
                        "@id": "https://dev.databus.dbpedia.org/denis/plass-demo/company-data",
                        "@type": "Artifact"
                      },
                      {
                        "@id": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl/judaicalink/2023-03-06",
                        "@type": "Artifact",
                        "group": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl",
                        "abstract": "Linking encyclopediae on Jewish culture and history.",
                        "description": "Linking encyclopediae on Jewish culture and history.",
                        "title": "judaicalink"
                      },
                      {
                        "@id": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl/judaicalink/2022-10-28",
                        "@type": "Artifact",
                        "group": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl",
                        "abstract": "Linking encyclopediae on Jewish culture and history.",
                        "description": "Linking encyclopediae on Jewish culture and history.",
                        "title": "judaicalink"
                      },
                      {
                        "@id": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl/judaicalink",
                        "@type": "Artifact",
                        "group": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl",
                        "abstract": "Linking encyclopediae on Jewish culture and history.",
                        "description": "Linking encyclopediae on Jewish culture and history.",
                        "title": "judaicalink"
                      }
                    ]
                  }
        "404":
          description: "Not Found."
          content:
            text/plain:
              schema:
                type: string
                example: "The requested resource could not be found."
    delete:
      summary: "Delete Artifact"
      description: "Deletes a Databus Artifact from the Databus. Associated DataIds will stay intact. 
        **If you intend to delete the whole artifact, query the associated DataIds and delete them first.**"
      operationId: "delete-artifact"
      tags:
        - Artifact 
      security:
        - ApiKeyAuth: []
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: group
          in: path
          description: target group identifier
          schema:
            type: string
          required: true
          example: "%GROUP%"
        - name: artifact
          in: path
          description: artifact identifier
          schema:
            type: string
          required: true
          example: "%ARTIFACT%"
      responses:
        "200":
          description: "OK"
        "204":
          description: "No Content"
        "403":
          description: "Error: Forbidden"
          content:
            text/plain:
              schema:
                type: string
                example: "You cannot perform this action in a foreign namespace."

  /{account}/{group}/{artifact}/{version}:
    put:
      summary: "Create / Update DataId"
      description: "
        Create or update a DataId on the Databus
        
        * The input data must be supplied as Json-LD 
        
        * The input data will be filtered with this [construct query](./server/app/common/queries/constructs/construct-version.sparql)
        
        * The **filtered data** must conform to these [SHACL shapes](./server/app/common/shacl/dataid-shacl.ttl)
        
      "
      operationId: "create-dataid"
      tags:
        - DataID (version) 
      security:
        - ApiKeyAuth: []
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: group
          in: path
          description: group identifier
          schema:
            type: string
          required: true
          example: "%GROUP%"
        - name: artifact
          in: path
          description: artifact identifier
          schema:
            type: string
          required: true
          example: "%ARTIFACT%"
        - name: version
          in: path
          description: version identifier
          schema:
            type: string
          required: true
          example: "%VERSION%"
      requestBody:
        description: "Metadata in JSONLD. May contain at most one group and one version metadata graph."
        required: true
        content:
          application/ld+json:
            schema:
              type: object
              example: |
                {
                  "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                  "@graph": {
                    "@type": [ "Version", "Dataset" ],
                    "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%/%VERSION%",
                    "hasVersion": "%VERSION%",
                    "title": "Test Version",
                    "description": "Data for testing purposes.",
                    "license": "http://creativecommons.org/licenses/by/4.0/",
                    "distribution": [
                      {
                        "@type": "Part",
                        "formatExtension": "ttl",
                        "compression": "none",
                        "downloadURL": "https://holycrab13.github.io/webid.ttl",
                        "byteSize": 2730,
                        "sha256sum": "d61a05ca4810367f361f17500304a168aab27a3119c93a18c00bce1775dfd6b1"
                      }
                    ]
                  }
                }
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                example: |
                  {
                    "logLevel": "error",
                    "log": []
                  }
        "400":
          description: "Error. Bad Request."
          content:
            text/plain:
              schema:
                type: string
                example: "Graph with id %DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%/%VERSION% not found in input."
        "403":
          description: "Error: Forbidden"
          content:
            text/plain:
              schema:
                type: string
                example: "You cannot perform this action in a foreign namespace."
    get:
      summary: "Get DataId"
      tags:
        - DataID (version) 
      description: "Retrieve a DataId as JSONLD"
      operationId: "get-dataid"
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: group
          in: path
          description: group identifier
          schema:
            type: string
          required: true
          example: "%GROUP%"
        - name: artifact
          in: path
          description: artifact identifier
          schema:
            type: string
          required: true
          example: "%ARTIFACT%"
        - name: version
          in: path
          description: version identifier
          schema:
            type: string
          required: true
          example: "%VERSION%"
      responses:
        "200":
          description: "OK"
          content:
            application/ld+json:
              schema:
                type: object
                example: |
                  {
                    "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                    "@graph": [
                      {
                        "@id": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl/judaicalink/2022-10-28#judaicalink_distinctid=id1_status=500_type=other.file",
                        "@type": "Part",
                        "compression": "none",
                        "file": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl/judaicalink/2022-10-28/judaicalink_distinctid=id1_status=500_type=other.file",
                        "formatExtension": "file",
                        "sha256sum": "5712d2f5c8b9f27e2ac3ff568c05032e658d28d47c805ea27625c4c1a4fb14a9",
                        "dcv:distinctid": "id1",
                        "dcv:status": "500",
                        "dcv:type": "other",
                        "hasVersion": "2022-10-28",
                        "issued": "2023-03-06T15:27:48.850Z",
                        "modified": "2023-03-06T15:27:48.850Z",
                        "dcat:byteSize": 17690,
                        "downloadURL": "http://data.judaicalink.org/data/"
                      },
                      {
                        "@id": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl/judaicalink/2022-10-28#judaicalink_distinctid=id0_status=500_type=other.file",
                        "@type": "Part",
                        "compression": "none",
                        "file": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl/judaicalink/2022-10-28/judaicalink_distinctid=id0_status=500_type=other.file",
                        "formatExtension": "file",
                        "sha256sum": "5712d2f5c8b9f27e2ac3ff568c05032e658d28d47c805ea27625c4c1a4fb14a9",
                        "dcv:distinctid": "id0",
                        "dcv:status": "500",
                        "dcv:type": "other",
                        "hasVersion": "2022-10-28",
                        "issued": "2023-03-06T15:27:48.850Z",
                        "modified": "2023-03-06T15:27:48.850Z",
                        "dcat:byteSize": 17690,
                        "downloadURL": "http://data.judaicalink.org/data/"
                      },
                      {
                        "@id": "20617c91ba3780bb0141bc9357f57ad3",
                        "@type": "databus:DatabusTractateV1",
                        "signature": "UuNw/KHoZfWkHxSo7bNTBwBhVpTY3wl1xOkI2fsSy/iDgzV8iUjlmfyAXgDaTschevGtPmPA4x2LsYRSeQbP5oJ4dnww6pqPzuBLu8Qpanuq40bJS1mAC1Cg58yuR5Zw3tmtn6Yxpoujolxqo5toD1IH1P2L6KfGdXM6HfJb+BR8uxIMiEB0yrRYRSuMKi2mkm6CqCbRaRHTL70DMO8lqoc9nOq/KHcm2Kat0kBeluLciBjPUdrIeepQMwNt4Lk6iXVkB6xHEUros45p3xXGb0+obHnkYdEQpNzPCXIR6Ou1LvuAFgfzmpuYg0yQUjJSKshsiPf91NLJTGLzfEvgDA=="
                      },
                      {
                        "@id": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl/judaicalink/2022-10-28",
                        "@type": [
                          "Dataset",
                          "Version"
                        ],
                        "artifact": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl/judaicalink",
                        "group": "https://dev.databus.dbpedia.org/denis/lodcloud-crawl",
                        "abstract": "Linking encyclopediae on Jewish culture and history.",
                        "description": "Linking encyclopediae on Jewish culture and history.",
                        "hasVersion": "2022-10-28",
                        "issued": "2023-03-06T15:27:48.850Z",
                        "license": "https://no.license.available/",
                        "modified": "2023-03-06T15:27:48.850Z",
                        "publisher": "https://dev.databus.dbpedia.org/denis#this",
                        "title": "judaicalink",
                        "distribution": [
                          "https://dev.databus.dbpedia.org/denis/lodcloud-crawl/judaicalink/2022-10-28#judaicalink_distinctid=id1_status=500_type=other.file",
                          "https://dev.databus.dbpedia.org/denis/lodcloud-crawl/judaicalink/2022-10-28#judaicalink_distinctid=id0_status=500_type=other.file"
                        ],
                        "proof": {
                          "@id": "20617c91ba3780bb0141bc9357f57ad3"
                        }
                      }
                    ]
                  }
        "404":
          description: "Not Found."
          content:
            text/plain:
              schema:
                type: string
                example: "The requested resource could not be found."
    delete:
      summary: "Delete DataId"
      description: "Delete a DataId from the Databus."
      operationId: "delete-dataid"
      tags:
        - DataID (version) 
      security:
        - ApiKeyAuth: []
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: group
          in: path
          description: group identifier
          schema:
            type: string
          required: true
          example: "%GROUP%"
        - name: artifact
          in: path
          description: artifact identifier
          schema:
            type: string
          required: true
          example: "%ARTIFACT%"
        - name: version
          in: path
          description: version identifier
          schema:
            type: string
          required: true
          example: "%VERSION%"
      responses:
        "200":
          description: "OK"
        "204":
          description: "No Content"
        "403":
          description: "Forbidden"
  /{account}/{group}/{artifact}/{version}/{file}:
    get:
      summary: "Get File"
      description: "Get a file from the Databus. The request URI is the Databus file identifier."
      operationId: "get-file"
      tags:
        - DataID (version) 
      parameters:
        - name: account
          in: path
          description: account name
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: group
          in: path
          description: group identifier
          schema:
            type: string
          required: true
          example: "%GROUP%"
        - name: artifact
          in: path
          description: artifact identifier
          schema:
            type: string
          required: true
          example: "%ARTIFACT%"
        - name: version
          in: path
          description: version identifier
          schema:
            type: string
          required: true
          example: "%VERSION%"
        - name: file
          in: path
          description: file identifier
          schema:
            type: string
          required: true
          example: "%ARTIFACT%.ttl"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found."
          content:
            text/plain:
              schema:
                type: string

  /{account}/collections/{id}:
    put:
      summary: "Create / Update Collection"
      description: "Creates or updates a Databus Collection."
      operationId: "create-collection"
      tags:
        - Collection
      security:
        - ApiKeyAuth: []
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: id
          in: path
          description: The collection identifier
          schema:
            type: string
          required: true
          example: "%GROUP%-%ARTIFACT%"
      requestBody:
        description: "Collection data as JSONLD."
        required: true
        content:
          application/ld+json:
            schema:
              type: object
              example: '{
                "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                "@graph": [
                  {
                    "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/collections/%GROUP%-%ARTIFACT%",
                    "@type": "databus:Collection",
                    "publisher": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%#this",
                    "title": "%GROUP% %ARTIFACT%",
                    "description": "%GROUP% %ARTIFACT% Data (latest version) from DBpedia.",
                    "databus:collectionContent": "%7B%22root%22%3A%7B%22uri%22%3Anull%2C%22property%22%3Anull%2C%22childNodes%22%3A%5B%7B%22uri%22%3A%22http%3A%2F%2Flocalhost%3A3000%22%2C%22property%22%3Anull%2C%22childNodes%22%3A%5B%7B%22uri%22%3A%22http%3A%2F%2Flocalhost%3A3000%2F%USERNAME%%2F%GROUP%%22%2C%22property%22%3A%22dataid%3Agroup%22%2C%22childNodes%22%3A%5B%7B%22uri%22%3A%22http%3A%2F%2Flocalhost%3A3000%2F%USERNAME%%2F%GROUP%%2F%ARTIFACT%%22%2C%22property%22%3A%22dataid%3Aartifact%22%2C%22childNodes%22%3A%5B%5D%2C%22facetSettings%22%3A%7B%22http%3A%2F%2Fpurl.org%2Fdc%2Fterms%2FhasVersion%22%3A%5B%7B%22value%22%3A%22%VERSION%%22%2C%22checked%22%3Atrue%7D%5D%7D%7D%5D%2C%22facetSettings%22%3A%7B%7D%7D%5D%2C%22facetSettings%22%3A%7B%7D%7D%5D%2C%22facetSettings%22%3A%7B%7D%7D%2C%22generatedQuery%22%3A%7B%22root%22%3A%7B%22uri%22%3Anull%2C%22property%22%3Anull%2C%22childNodes%22%3A%5B%5D%2C%22facetSettings%22%3A%7B%7D%7D%7D%7D"
                  }
                ]
              }'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                example: '{
                  "success": true,
                  "message": "Collection saved successfully.",
                  "data": [
                    {
                      "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/collections/%GROUP%-%ARTIFACT%",
                      "@type": [
                        "http://dataid.dbpedia.org/ns/core#Collection"
                      ],
                      "http://dataid.dbpedia.org/ns/core#content": [
                        {
                          "@value": "%7B%22root%22%3A%7B%22uri%22%3Anull%2C%22property%22%3Anull%2C%22childNodes%22%3A%5B%7B%22uri%22%3A%22http%3A%2F%2Flocalhost%3A3000%22%2C%22property%22%3Anull%2C%22childNodes%22%3A%5B%7B%22uri%22%3A%22http%3A%2F%2Flocalhost%3A3000%2F%USERNAME%%2F%GROUP%%22%2C%22property%22%3A%22dataid%3Agroup%22%2C%22childNodes%22%3A%5B%7B%22uri%22%3A%22http%3A%2F%2Flocalhost%3A3000%2F%USERNAME%%2F%GROUP%%2F%ARTIFACT%%22%2C%22property%22%3A%22dataid%3Aartifact%22%2C%22childNodes%22%3A%5B%5D%2C%22facetSettings%22%3A%7B%7D%7D%5D%2C%22facetSettings%22%3A%7B%7D%7D%5D%2C%22facetSettings%22%3A%7B%7D%7D%5D%2C%22facetSettings%22%3A%7B%7D%7D%2C%22generatedQuery%22%3A%7B%22root%22%3A%7B%22uri%22%3Anull%2C%22property%22%3Anull%2C%22childNodes%22%3A%5B%5D%2C%22facetSettings%22%3A%7B%7D%7D%7D%7D"
                        }
                      ],
                      "http://purl.org/dc/terms/description": [
                        {
                          "@value": "%GROUP% %ARTIFACT% (version %VERSION%) from DBpedia."
                        }
                      ],
                      "http://purl.org/dc/terms/publisher": [
                        {
                          "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%#this"
                        }
                      ],
                      "http://purl.org/dc/terms/title": [
                        {
                          "@value": "%GROUP% %ARTIFACT%"
                        }
                      ]
                    }
                  ]
                }'
        "403":
          description: "Forbidden. The account failed to authenticate."
          content:
            text/plain:
              schema:
                type: string
                example: "Error: Forbidden"
    get:
      summary: "Get Collection"
      description: "Retrieve a Databus Collection."
      operationId: "get-collection"
      tags:
        - Collection
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: id
          in: path
          description: the collection identifier
          schema:
            type: string
          required: true
          example: "yourCollection"
      responses:
        "200":
          description: "OK"
          content:
            text/sparql:
              schema:
                type: string
                example: "PREFIX rdfs:   <http://www.w3.org/2000/01/rdf-schema#>
                  PREFIX rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                  PREFIX dcat:   <http://www.w3.org/ns/dcat#>
                  PREFIX dct:    <http://purl.org/dc/terms/>
                  PREFIX dcv: <https://dataid.dbpedia.org/databus-cv#>
                  PREFIX databus: <https://dataid.dbpedia.org/databus#>
                  SELECT ?file WHERE
                  {
                  	{
                  		GRAPH ?g
                  		{
                  			{
                  				?dataset databus:group <%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/yourCollection> .
                  				{
                  					?dataset databus:artifact <%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/yourCollection/first> .
                  				}
                  			}
                  			?dataset dcat:distribution ?distribution .
                  			?distribution databus:file ?file .
                  		}
                  	}
                  }"
            application/ld+json:
              schema:
                type: object
                example: '{
                  "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%",
                  "@type": "databus:Group",
                  "description": "%GROUP% datasets from DBpedia",
                  "title": "%GROUP% Data",
                  "@context": {
                    "title": {
                      "@id": "http://purl.org/dc/terms/title"
                    },
                    "description": {
                      "@id": "http://purl.org/dc/terms/description"
                    },
                    "dbo": "http://dbpedia.org/ontology/",
                    "sec": "https://w3id.org/security#",
                    "dataid": "http://dataid.dbpedia.org/ns/core#",
                    "dct": "http://purl.org/dc/terms/",
                    "dcv": "https://dataid.dbpedia.org/databus-cv#",
                    "xsd": "http://www.w3.org/2001/XMLSchema#",
                    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
                    "cert": "http://www.w3.org/ns/auth/cert#",
                    "dcat": "http://www.w3.org/ns/dcat#",
                    "foaf": "http://xmlns.com/foaf/0.1/"
                  }
                }'
        "404":
          description: "Not Found."
          content:
            text/plain:
              schema:
                type: string
    delete:
      summary: "Delete Collection"
      description: ""
      operationId: "delete-collection"
      tags:
        - Collection
      security:
        - ApiKeyAuth: []
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
        - name: id
          in: path
          description: the collection identifier
          schema:
            type: string
          required: true
          example: "%GROUP%-%ARTIFACT%"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found."
  /api/collection/md5hash:
    get:
      summary: "Get Collection md5-Hash"
      description: "Get the md5-Hash of the collection contents. Can be used to check whether the selected files of a collection changed."
      operationId: "collection-md5"
      tags:
        - Collection
      parameters:
        - name: uri
          in: query
          description: collection uri
          schema:
            type: string
          required: true
          example: '%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/collections/%GROUP%-%ARTIFACT%'
      responses:
        "200":
          description: "OK"
          content:
            string:
              schema:
                type: string
                format: binary
                example: '37dac6d1e315917bceba4f38564dc529'

  /{account}:
    put:
      summary: "Create / Update Account"
      description: "
        Creates or updates a Databus Account.
        
          * The input data must be supplied as Json-LD 
          
          * The input data will be filtered with this [construct query](./server/app/common/queries/constructs/construct-account.sparql)
  
          * The **filtered data** must conform to these [SHACL shapes](./server/app/common/shacl/dataid-shacl.ttl)
      "
      operationId: "create-account"
      tags:
        - Account
      security:
        - ApiKeyAuth: []
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
      requestBody:
        description: "Account data as JSONLD."
        required: true
        content:
          application/ld+json:
            schema:
              type: object
              example: '{
                "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                "@graph": [
                  {
                      "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%",
                      "@type": "foaf:PersonalProfileDocument",
                      "maker": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%#this",
                      "primaryTopic": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%#this"
                  },
                  {
                      "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%#this",
                      "@type": [
                          "dbo:DBpedian",
                          "foaf:Person"
                      ],
                      "name": "%USERNAME%",
                      "rdfs:comment": "Hello Databus!",
                      "account": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%"
                  }
                ]
              }'
      responses:
        "201":
          description: "OK"
          content:
            text/plain:
              schema:
                type: string
                example: 'Account created successfully.'
        "403":
          description: "Error: Forbidden"
          content:
            text/plain:
              schema:
                type: string
                example: "Forbidden."
    get:
      summary: "Get Account"
      description: "Retrieve a Databus Account as JSONLD."
      operationId: "get-account"
      tags:
        - Account
      parameters:
        - name: account
          in: path
          description: account namespace
          schema:
            type: string
          required: true
          example: '%USERNAME%'
      responses:
        "200":
          description: "OK"
          content:
            application/ld+json:
              schema:
                type: object
                example: |
                  {
                    "@context": {
                      "name": {
                        "@id": "http://xmlns.com/foaf/0.1/name"
                      },
                      "account": {
                        "@id": "http://xmlns.com/foaf/0.1/account",
                        "@type": "@id"
                      },
                      "key": {
                        "@id": "http://www.w3.org/ns/auth/cert#key",
                        "@type": "@id"
                      },
                      "comment": {
                        "@id": "http://www.w3.org/2000/01/rdf-schema#comment"
                      },
                      "modulus": {
                        "@id": "http://www.w3.org/ns/auth/cert#modulus"
                      },
                      "exponent": {
                        "@id": "http://www.w3.org/ns/auth/cert#exponent",
                        "@type": "http://www.w3.org/2001/XMLSchema#integer"
                      },
                      "label": {
                        "@id": "http://www.w3.org/2000/01/rdf-schema#label"
                      },
                      "primaryTopic": {
                        "@id": "http://xmlns.com/foaf/0.1/primaryTopic",
                        "@type": "@id"
                      },
                      "maker": {
                        "@id": "http://xmlns.com/foaf/0.1/maker",
                        "@type": "@id"
                      },
                      "dbo": "http://dbpedia.org/ontology/",
                      "sec": "https://w3id.org/security#",
                      "dataid": "http://dataid.dbpedia.org/ns/core#",
                      "dct": "http://purl.org/dc/terms/",
                      "dcv": "https://dataid.dbpedia.org/databus-cv#",
                      "xsd": "http://www.w3.org/2001/XMLSchema#",
                      "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
                      "cert": "http://www.w3.org/ns/auth/cert#",
                      "dcat": "http://www.w3.org/ns/dcat#",
                      "prov": "http://www.w3.org/ns/prov-o#",
                      "foaf": "http://xmlns.com/foaf/0.1/"
                    },
                    "@graph": [
                      {
                        "@id": "_:b0",
                        "@type": "cert:RSAPublicKey",
                        "label": "Shared Databus Public Key",
                        "cert:exponent": 65537,
                        "modulus": "a1e12228e4d931cc1cc00f53822f3c759fe3a66b692fab0df625f704ee4a03e25ec6bd6af7408cb070702dd4b5245a438c697c8e0243989459dc4bd90269116355a763d9f48ba23d4cfec5d6189606b160dd42ed5deb5a515306df2684d8070bac3e61d5f91c481b81163630877be42207547523ebe378ce44df836a5db28ca50b3cda007f1a9a8734c73a620e6aabd2abda8c3ba52ecd41fba866a66c17f6d713abf24983ef5074bb9eac8abf9e36979cd8f87441e8d500889c2efba793b7d0009cc6b14b8dc1466c6e244a0d907181f708e69a02e417fce2786ecb11403e455abf458a99131ca62a31981757e3eb7b00ff30942b397b879b9485d4fbdf7c43"
                      },
                      {
                        "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%",
                        "@type": "foaf:PersonalProfileDocument",
                        "maker": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%#this",
                        "primaryTopic": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%#this"
                      },
                      {
                        "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%#this",
                        "@type": [
                          "foaf:Person",
                          "dbo:DBpedian"
                        ],
                        "comment": "Hello Databus!",
                        "key": "_:b0",
                        "account": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%",
                        "name": "%USERNAME%"
                      }
                    ]
                  }
        "404":
          description: "Not Found."
          content:
            text/plain:
              schema:
                type: string
  /api/account/webid/add:
    post:
      summary: "Add WebId"
      description: "Links an external WebId to the authenticated Databus Account."
      operationId: "account-webid-link"
      security:
        - ApiKeyAuth: []
      tags:
        - Account
      parameters:
        - name: uri
          in: query
          description: the WebId uri to link
          schema:
            type: string
          required: true
          example: 'https://holycrab13.github.io/webid.ttl'
      responses:
        "200":
          description: "OK"
        "403":
          description: "Error: Forbidden"
          content:
            text/plain:
              schema:
                type: string
                example: "Unable to find valid backlink in WebId document."
  /api/account/webid/remove:
    post:
      summary: "Remove WebId"
      description: "Removes an external WebId from the authenticated Databus Account."
      operationId: "account-webid-remove"
      security:
        - ApiKeyAuth: []
      tags:
        - Account
      parameters:
        - name: uri
          in: query
          description: the WebId uri to remove
          schema:
            type: string
          required: true
          example: 'https://holycrab13.github.io/webid.ttl'
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: string
                example: "WebId removed from account."
  /api/account/api-key/create:
    post:
      summary: "Create API key"
      description: "Create a new API key."
      operationId: "account-apikey-create"
      security:
        - ApiKeyAuth: []
      tags:
        - Account
      parameters:
        - name: name
          in: query
          description: the desired name of the api key
          schema:
            type: string
          required: true
          example: 'default'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                example: '{
                    "name": "default",
                    "key": "2df02a7f-32c4-46cd-9c6e-bd80c72e6e48"
                  }'
        "400":
          description: "Error. Bad Request"
          content:
            text/plain:
              schema:
                type: string
                example: "Failed to create API key. You might already have an API key with that name."
        "403":
          description: "Error. Forbidden"
          content:
            text/plain:
              schema:
                type: string
                example: "Account name is missing. Please claim an account name first."
  /api/account/api-key/delete:
    post:
      summary: "Delete API key"
      description: "Delete an existing API key."
      operationId: "account-apikey-delete"
      security:
        - ApiKeyAuth: []
      tags:
        - Account
      parameters:
        - name: name
          in: query
          description: the name of the api key to delete
          schema:
            type: string
          required: true
          example: 'default'
      responses:
        "200":
          description: "OK"
        "204":
          description: "Api-Key didn't exist"
          
  /api/tractate/v1/canonicalize:
    post:
      summary: "Canonicalize DataId"
      description: "Generate the canonicalized form of a DataId for the Databus Tractate v1."
      operationId: "tractate-canonicalize"
      tags:
        - Tractate
      requestBody:
        description: "Metadata in JSONLD. May contain at most one group and one version metadata graph."
        required: true
        content:
          application/ld+json:
            schema:
              type: object
              example: |
                {
                  "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                  "@graph": {
                    "@type": [ "Version", "Dataset" ],
                    "@id": "%DATABUS_RESOURCE_BASE_URL%/%ACCOUNT%/%GROUP%/%ARTIFACT%/%VERSION%",
                    "hasVersion": "%VERSION%",
                    "title": "Test Version",
                    "description": "Data for testing purposes.",
                    "license": "http://creativecommons.org/licenses/by/4.0/",
                    "distribution": [
                      {
                        "@type": "Part",
                        "formatExtension": "ttl",
                        "compression": "none",
                        "downloadURL": "https://holycrab13.github.io/webid.ttl",
                        "byteSize": 2730,
                        "sha256sum": "d61a05ca4810367f361f17500304a168aab27a3119c93a18c00bce1775dfd6b1"
                      }
                    ]
                  }
                }
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: string
                example: 'Databus Tractate Version 1.0
                  %DATABUS_RESOURCE_BASE_URL%/%USERNAME%#this
                  %DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%/%VERSION%
                  http://creativecommons.org/licenses/by/4.0/
                  d61a05ca4810367f361f17500304a168aab27a3119c93a18c00bce1775dfd6b1'
  /api/tractate/v1/verify:
    post:
      summary: "Verify Tractate"
      description: "Verify a Databus Tractate v1."
      operationId: "tractate-verify"
      tags:
        - Tractate
      requestBody:
        description: "Metadata in JSONLD. May contain at most one group and one version metadata graph."
        required: true
        content:
          application/ld+json:
            schema:
              type: object
              example: '{
                "@context": "https://downloads.dbpedia.org/databus/context.jsonld",
                "@graph": [
                    {
                      "@id": "_:b0",
                      "@type": "dataid:DatabusTractateV1",
                      "signature": {
                          "@type": "xsd:string",
                          "@value": "ydUqnbsw4JZaiuJ7n9vsIIAIhU1to0Dlr85KVGAFEYGOiAvx22ruwWfgeGOeRC2Dwkwcnq1QdgnAZnAkxiAu1XqmRMlGtwUtkn7XyeSQBQfbuiaL/Vsq7iQWd7YyD9C5PMXcP6T7F21mqW8oZcFso/JDemhNu//dC+o/XWsGM6Vf7teBaXuWUFTrg39c0Rf9X/7MxQN6TQ6Na0+C/vjQO5nM55B7kJyfGaO8PUez8zShA3uYoCHbeJgd8MIvM04S3ia6itg+w+CaEhN9OZNKRm8I7Kxd67c+3hBaijqYROswC4+5O+fEWIqCUdKnPu11/DFSUP5I0gSBgx1gVdx+aA=="
                      }
                    },
                    {
                      "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%",
                      "@type": "dataid:Artifact"
                    },
                    {
                      "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%/%VERSION%",
                      "@type": "dataid:Version"
                    },
                    {
                      "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%/%VERSION%#Dataset",
                      "@type": "Dataset",
                      "artifact": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%",
                      "group": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%",
                      "version": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%/%VERSION%",
                      "description": "%GROUP% version of the %ARTIFACT% dataset from DBpedia",
                      "hasVersion": "%VERSION%",
                      "issued": "2022-02-11T13:28:58.132Z",
                      "license": "http://creativecommons.org/licenses/by/4.0/",
                      "modified": "2022-02-11T13:28:58.132Z",
                      "publisher": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%#this",
                      "title": "%GROUP% %ARTIFACT%",
                      "distribution": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%/%VERSION%#%ARTIFACT%.ttl",
                      "proof": {
                          "@id": "_:b0"
                      }
                    },
                    {
                      "@id": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%/%VERSION%#%ARTIFACT%.ttl",
                      "@type": "Part",
                      "compression": "none",
                      "file": "%DATABUS_RESOURCE_BASE_URL%/%USERNAME%/%GROUP%/%ARTIFACT%/%VERSION%/%ARTIFACT%.ttl",
                      "formatExtension": "ttl",
                      "formatExtension": "ttl",
                      "sha256sum": "d61a05ca4810367f361f17500304a168aab27a3119c93a18c00bce1775dfd6b1",
                      "hasVersion": "%VERSION%",
                      "issued": "2022-02-11T13:28:58.132Z",
                      "byteSize": "2730",
                      "downloadURL": "https://holycrab13.github.io/webid.ttl"
                    }
                ]
              }'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                example: '{
                    "success": true,
                    "message": "Verification successful.\n"
                  }'

          

