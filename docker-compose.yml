version: "3.0"
services:
  databus:
    image: "docker.io/dbpedia/databus"
    ports:
      - 3000:3000 # HTTP:  Databus web UI
#      - 80:80       # ** uncomment if proxy enabled only** HTTP port of included proxy (caddy) necessary for Auto-HTTPS via ACME and HTTP->HTTPS redirect                                                  
#      - 443:4000    # ** uncomment if proxy enabled only** HTTPS: Databus web UI via caddy proxy     
    environment:
      DATABUS_RESOURCE_BASE_URL: ${DATABUS_RESOURCE_BASE_URL}
      DATABUS_DATABASE_URL: "http://gstore:8080"
      DATABUS_OIDC_ISSUER_BASE_URL: ${DATABUS_OIDC_ISSUER_BASE_URL}
      DATABUS_NAME: ${DATABUS_NAME}
      DATABUS_ORG_ICON: ${DATABUS_ORG_ICON}
      DATABUS_BANNER_COLOR: ${DATABUS_BANNER_COLOR}
      DATABUS_OIDC_CLIENT_ID: ${DATABUS_OIDC_CLIENT_ID}
      DATABUS_OIDC_SECRET: ${DATABUS_OIDC_SECRET}
      DATABUS_PRIVATE_MODE: ${DATABUS_PRIVATE_MODE} # Private mode will only show metadata for logged-in users
      DATABUS_PROXY_SERVER_ENABLE: ${DATABUS_PROXY_SERVER_ENABLE}
      DATABUS_PROXY_SERVER_USE_ACME: ${DATABUS_PROXY_SERVER_USE_ACME}
      DATABUS_PROXY_SERVER_OWN_CERT: ${DATABUS_PROXY_SERVER_OWN_CERT} # When not using ACME, what is the name of the own certificate file?
      DATABUS_PROXY_SERVER_OWN_CERT_KEY: ${DATABUS_PROXY_SERVER_OWN_CERT_KEY} # When not using ACME, what is the name of the own certificate's key file?
      DATABUS_PROXY_SERVER_HOSTNAME: ${DATABUS_PROXY_SERVER_HOSTNAME} # What is the hostname of this machine, when using the proxy server?
    volumes:
      - ./data/dav/:/databus/server/dav/
      - ./data/sqlite/:/databus/server/sqlite
      - ./data/keypair/:/databus/server/keypair
      - ./data/tls/:/tls:ro # path for TLS (HTTPS) certs when using integrated caddy proxy                                                                                                                 
      - ./data/tls/caddy:/root/.local/share/caddy/ # path for caddy settings esp. automatic TLS certificates
  gstore:
    image: "docker.io/dbpedia/gstore"
    environment:
      STORAGE_USER: ${VIRTUOSO_USER}
      STORAGE_PASS:  ${VIRTUOSO_PASSWORD}
      STORAGE_SPARQL_ENDPOINT_URI: http://virtuoso:8890/sparql
    ports:
      - "127.0.0.1:3002:8080"
    volumes:
      - ./data/gstore/repo:/gstore/git
      - ./data/gstore/logs:/gstore/logs
  virtuoso:
    image: "docker.io/openlink/virtuoso-opensource-7"
    environment:
      DBA_PASSWORD: ${VIRTUOSO_PASSWORD}
      SPARQL_UPDATE: "true"
      DEFAULT_GRAPH: ${DATABUS_RESOURCE_BASE_URL}
    ports:
      - "127.0.0.1:3003:8890"
    volumes:
      - ./data/virtuoso:/database
    entrypoint: /bin/bash -c "
        echo 'grant SPARQL_LOAD_SERVICE_DATA to \"SPARQL\";' > /opt/virtuoso-opensource/initdb.d/ini.sql &&
        echo 'grant SPARQL_SPONGE to \"SPARQL\";' >> /opt/virtuoso-opensource/initdb.d/ini.sql &&
        echo 'grant SPARQL_SELECT_FED to \"SPARQL\";' > /opt/virtuoso-opensource/initdb.d/ini.sql &&
        /virtuoso-entrypoint.sh
      "
